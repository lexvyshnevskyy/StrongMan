<?php
/**
 * Created by PhpStorm.
 * User: test
 * Date: 12.09.19
 * Time: 18:21
 */

class exportData{
    // Here initialize our namespace and resource name.
    public function __construct() {
        $this->namespace     = 'wp/v2/champion-helper';
        $this->resource_name = '/export';
    }

    // Register our routes.
    public function register_routes() {
        register_rest_route(
            $this->namespace,
            $this->resource_name,
            array(
                // GET New Price Entry
                array(
                    'methods'  => 'POST',
                    'callback' => array($this, 'getExcel'),
                    'args'     => array(
                        'ID' => array(
                            'type'     => 'int',
                            'required' => true,
                        ),

                    ),
                    'permission_callback' => 'is_user_logged_in',
                ),
            )
        );
    }

    /**
     * Wrapper for Rest_API response
     * @param mixed $data what you want return
     * @param bool $status Status of current request.
     * @param string $message Any message
     * @param int $code http code
     * @return mixed|WP_REST_Response
     */
    private function response($data, $status = true, $message="Success", $code=200){
        $response = rest_ensure_response($data);
        $response->status = $code;
        $response->data=array(
            "code"=> $status,
            "message"=>$message,
            "data"=>array(
                "status"=>$code,
                "result"=>$data,
            ),
        );
        return $response;
    }

    /**
     * Create new price schedule group
     * @param $request
     * @return mixed|WP_REST_Response
     */
    public function getExcel($request){
        $params = $request->get_params();
        $this->getData($params);



//        if ((!strtotime($params['dt_begin'])) or (!strtotime($params['dt_end'])))
//            return $this->response('', false, 'Wrong data provided', 400);

//        switch ($params['param']){
//            case 1:return $this->response($this->getHostes($params));break;
//            case 2:return $this->response($this->getHostes($params));break;
//            default:return $this->response('', false, 'Wrong data provided', 400);
//        }
        $result = $this->getData($params);
        if ($result)
            return $this->response($result);
        else return $this->response('', false, 'Wrong data provided', 400);


    }

    private function getData($params){
        try {
            require_once(__DIR__ . '/../PHPExcel/PHPExcel/IOFactory.php');

            $judgeData = judgeClass::getJudgesAssignee($params['ID']);

            $filter_args = array(
                'date_start' => FILTER_SANITIZE_STRING,
                'date_end' => FILTER_SANITIZE_STRING,
                'sectionDSCR' => array('filter' => FILTER_CALLBACK, 'options' => 'plugin_json_decode')
            );

            $metadata = plugin_get_post_meta(get_post($params['ID']), $filter_args);
            $date_dif = plugin_get_date_diff($metadata);
            $date_period = plugin_get_date_period($metadata);


            $objPHPExcel = new PHPExcel();
            $objPHPExcel->getProperties()->setCreator('');
            $objPHPExcel->getProperties()->setLastModifiedBy('');
            $objPHPExcel->getProperties()->setTitle("Office 2007 XLSX Export Document");
            $objPHPExcel->getProperties()->setSubject("Office 2007 XLSX Export Document");
            $objPHPExcel->getProperties()->setDescription("Export generated by " . get_bloginfo('name') . " " . get_bloginfo('url'));

            $objPHPExcel->setActiveSheetIndex(0);

            $objPHPExcel->getActiveSheet()->SetCellValue('A1', 'День');
            $objPHPExcel->getActiveSheet()->SetCellValue('A2', 'Потоки');
            $objPHPExcel->getActiveSheet()->SetCellValue('A3', 'Вікова категорія');
            $objPHPExcel->getActiveSheet()->SetCellValue('A4', 'Вагова категорія');
            // first column
            $i = 5;
            foreach ($judgeData as $judgeID => $judge):
                $objPHPExcel->getActiveSheet()->SetCellValue('A' . $i, $judge->name);
                $i++;
            endforeach;
            $azRange = range('A', 'Z');
            $datePeriodLength = count($date_period);
            $position = 1;
            $row = 5;
            foreach ($date_period as $el) {
                $len = count($metadata['sectionDSCR'][$el]);
                if ($len > 0) {
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells($azRange[$position] . '1:' . $azRange[$position + $len - 1] . '1');
                    $objPHPExcel->getActiveSheet()->SetCellValue($azRange[$position] . '1', $el); //date mark
                    for ($i = 1; $i <= $len; $i++) {
                        $objPHPExcel->getActiveSheet()->SetCellValue($azRange[$position + $i - 1] . '2', $i);

                        $temp = $metadata['sectionDSCR'][$el][$i - 1];
                        // $jsonSTR['age'][$temp]
                        $objPHPExcel->getActiveSheet()->SetCellValue($azRange[$position + $i - 1] . '3',judgeClass::$category_age[$i]);

                        // weight category
                        //$jsonSTR['weight'][$temp]
                        $objPHPExcel->getActiveSheet()->SetCellValue($azRange[$position + $i - 1] . '4', judgeClass::$category_weight[$i]);
                    }

                    foreach ($judgeData as $judgeID => $judge) {
                        $judge = new helperPluginClass($judge);
                        for ($i = 0; $i < $len; $i++) {
                            for ($i_temp = 0; $i_temp <= 7; $i_temp++) {
                                if ($judge->is_selected($el,$i,$i_temp)) {
                                    $objPHPExcel->getActiveSheet()->
                                    getStyle($azRange[$position + $i] . $row)->applyFromArray(array(
                                        'fill' => array(
                                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                                            'color' => array('rgb' => 'red')//$judge->getExcelColor($el, $i))
                                        )   
                                    ));
                                    $objPHPExcel->getActiveSheet()->SetCellValue(
                                        $azRange[$position + $i] . $row,
                                        judgeClass::$position_judge[$i_temp]
                                    );
                                    //var_dump($azRange[$position + $i] . $row, judgeClass::$position_judge[$i_temp]);
                                }
                            }
                        }
                        $row++;
                    }

                    $position += $len;
                }
            }


            $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
            $upload_dir = wp_upload_dir();
            $file = $upload_dir['path'] . '/competition_' . $params['ID'] . "export.xlsx";
            if (file_exists($file)) unlink($file);
            $objWriter->save($file);
            if (file_exists($file))
                return $upload_dir['url'] . '/competition_' . $params['ID'] . "export.xlsx";
            return false;
        }
        catch(Exception  $e){
            echo $e;
        }
    }


}